#pragma once

#include "RappTriangle.hpp"

#include <vector>
#include <memory>


/**
 * Class to store a point clouds generated by a LiDAR sensor.
 */
class cQuadNode
{
public:

public:
	cQuadNode();
	cQuadNode(double minX_mm, double maxX_mm, double minY_mm, double maxY_mm);
	virtual ~cQuadNode() = default;

	void setBounds(double minX_mm, double maxX_mm, double minY_mm, double maxY_mm);

	void addMeshData(cRappTriangle mesh);

	bool withinBounds(const cRappTriangle& point) const;
	bool withinBounds(const rfm::rappPoint_t& point) const;
	bool withinBounds(int x_mm, int y_mm) const;

	double height(const rfm::rappPoint_t& point) const;
	double height(int x_mm, int y_mm) const;

	cQuadNode* getNode(int x_mm, int y_mm);

protected:
	bool addSubLevel();

private:
	const double MINIMUM_SIZE_MM = 10'000;

	double mMinX_mm = 0;
	double mMaxX_mm = 0;
	double mMinY_mm = 0;
	double mMaxY_mm = 0;

	bool mHasSubNodes = false;
	bool mAtMinSize   = false;

	std::unique_ptr<cQuadNode>	mNW;
	std::unique_ptr<cQuadNode>	mNE;
	std::unique_ptr<cQuadNode>	mSW;
	std::unique_ptr<cQuadNode>	mSE;

	std::vector<cRappTriangle>	mGroundMesh;
};


