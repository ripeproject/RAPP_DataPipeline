#pragma once

#include "PointCloudTypes.hpp"

#include <vector>


/**
 * Class to store a point clouds generated by a LiDAR sensor.
 */
class cPointCloudBase
{
public:
    typedef std::vector<pointcloud::sCloudPoint_t> vCloud_t;

public:
    cPointCloudBase();
    virtual ~cPointCloudBase() = default;

    void clear();

    bool empty() const;
    std::size_t size() const;

    const vCloud_t& data() const { return mCloud; }

protected:
    vCloud_t mCloud;
};


/**
 * Class to store a point clouds generated by one given frame of the sensor.
 * Each point in the point cloud represents one pixel of the sensor.  Invalid
 * points are stored as x=0, y=0, and z=0.
 */
class cSensorPointCloudByFrame : public cPointCloudBase
{
public:
    cSensorPointCloudByFrame();

    bool empty() const;

    std::size_t pixelsPerColumn() const;	// The number of rows in the matrix
    std::size_t columnsPerFrame() const;	// The number of columns in the matrix

    void resize(uint16_t pixels_per_column, uint16_t columns_per_frame);

    uint16_t frameID() const { return mFrameID; }
    void frameID(uint16_t id);

    uint64_t timestamp_ns() const { return mTimestamp_ns; }
    void timestamp_ns(uint64_t ts);


private:
    uint16_t mFrameID;
    uint64_t mTimestamp_ns;

    std::size_t mNumOfPixelsPerColumn;
    std::size_t mNumOfCols;     // Columns Per Frame

};


/**
 * Class to store a reduced point clouds generated by one given frame of the sensor.
 * Invalid points (x=0, y=0, and z=0) are not stored in the point cloud.
 */
class cReducedPointCloudByFrame : public cPointCloudBase
{
public:
    cReducedPointCloudByFrame();

    uint16_t frameID() const { return mFrameID; }
    void frameID(uint16_t id);

    uint64_t timestamp_ns() const { return mTimestamp_ns; }
    void timestamp_ns(uint64_t ts);

    void resize(std::size_t num_of_points);

    void set(std::size_t point, const pointcloud::sCloudPoint_t& cloudPoint);

    void addPoint(const pointcloud::sCloudPoint_t& cloudPoint);

private:
    uint16_t mFrameID;
    uint64_t mTimestamp_ns;
};


/**
 * Class to store a point clouds generated by one given frame of the sensor.
 */
class cPointCloud : public cPointCloudBase
{
public:
    cPointCloud() = default;

    void resize(std::size_t num_of_points);

    void set(std::size_t point, const pointcloud::sCloudPoint_t& cloudPoint);

    void addPoint(const pointcloud::sCloudPoint_t& cloudPoint);
};



